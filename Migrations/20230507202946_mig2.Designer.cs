// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelGuide.Models;

#nullable disable

namespace TravelGuide.Migrations
{
    [DbContext(typeof(TravelContext))]
    [Migration("20230507202946_mig2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravelGuide.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TravelGuide.Models.CityTour", b =>
                {
                    b.Property<int>("CityTourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityTourID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<string>("Itinerary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("CityTourID");

                    b.HasIndex("CityID");

                    b.ToTable("CityTours");
                });

            modelBuilder.Entity("TravelGuide.Models.Hotel", b =>
                {
                    b.Property<int>("HotelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelID");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("TravelGuide.Models.Offer", b =>
                {
                    b.Property<int>("OfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("OfferID");

                    b.HasIndex("HotelId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("TravelGuide.Models.TourOffer", b =>
                {
                    b.Property<int>("TourOfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourOfferID"));

                    b.Property<int>("CityTourID")
                        .HasColumnType("int");

                    b.Property<int>("OfferID")
                        .HasColumnType("int");

                    b.HasKey("TourOfferID");

                    b.HasIndex("CityTourID");

                    b.HasIndex("OfferID");

                    b.ToTable("TourOffer");
                });

            modelBuilder.Entity("TravelGuide.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TravelGuide.Models.UserOffer", b =>
                {
                    b.Property<int>("UserOfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserOfferID"));

                    b.Property<int>("OfferID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserOfferID");

                    b.HasIndex("OfferID");

                    b.HasIndex("UserID");

                    b.ToTable("UserOffers");
                });

            modelBuilder.Entity("TravelGuide.Models.CityTour", b =>
                {
                    b.HasOne("TravelGuide.Models.City", "City")
                        .WithMany("CityTours")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TravelGuide.Models.Offer", b =>
                {
                    b.HasOne("TravelGuide.Models.Hotel", "Hotel")
                        .WithMany("Offers")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("TravelGuide.Models.TourOffer", b =>
                {
                    b.HasOne("TravelGuide.Models.CityTour", "CityTour")
                        .WithMany("TourOffers")
                        .HasForeignKey("CityTourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelGuide.Models.Offer", "Offer")
                        .WithMany("TourOffers")
                        .HasForeignKey("OfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityTour");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("TravelGuide.Models.UserOffer", b =>
                {
                    b.HasOne("TravelGuide.Models.Offer", "Offer")
                        .WithMany("UserOffers")
                        .HasForeignKey("OfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelGuide.Models.User", "User")
                        .WithMany("UserOffers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TravelGuide.Models.City", b =>
                {
                    b.Navigation("CityTours");
                });

            modelBuilder.Entity("TravelGuide.Models.CityTour", b =>
                {
                    b.Navigation("TourOffers");
                });

            modelBuilder.Entity("TravelGuide.Models.Hotel", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("TravelGuide.Models.Offer", b =>
                {
                    b.Navigation("TourOffers");

                    b.Navigation("UserOffers");
                });

            modelBuilder.Entity("TravelGuide.Models.User", b =>
                {
                    b.Navigation("UserOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
